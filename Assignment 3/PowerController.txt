package cpsc219p3.energytracker;

import cpsc219p3.energytracker.cost.Cost;
import cpsc219p3.energytracker.data.Data;
import cpsc219p3.energytracker.power.Power;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.paint.Color;
import javafx.stage.Stage;


public class PowerController {
    //Added a field in PowerController to hold a reference to EnergyController.
    private EnergyController energyController;

    Data data;
    Power power;
    @FXML
    private Button return_button;
    private Label status_display;
    private TextArea display_field;

    @FXML
    private TextField ac_power;

    @FXML
    private TextField dishwasher_power;


    @FXML
    private TextField dryer_power;

    @FXML
    private TextField fridge_power;

    @FXML
    private TextField light_power;

    @FXML
    private TextField microwave_power;

    @FXML
    private TextField tv_power;

    @FXML
    private TextField washer_power;
    //created a method in PowerController to set this reference.
    public void setEnergyController(EnergyController energyController){
        this.energyController = energyController;
    }
    @FXML
    void enter_utility_button(ActionEvent event) {
        try {
            data = new Data();
            double fridgePower = Double.parseDouble(fridge_power.getText());
            double fridgeKWH = (fridgePower * 240) / 1000.0;

            double microwavePower = Double.parseDouble(microwave_power.getText());
            double microwaveKWH = (microwavePower * 240) / 1000.0;

            double tvPower = Double.parseDouble(tv_power.getText());
            double tvKWH = (tvPower * 240) / 1000.0;

            double dishwasherPower = Double.parseDouble(dishwasher_power.getText());
            double dishwasherKWH = (dishwasherPower * 240) / 1000.0;

            double lightsPower = Double.parseDouble(light_power.getText());
            double lightsKWH = (lightsPower * 240) / 1000.0;

            double washerPower = Double.parseDouble(washer_power.getText());
            double washerKWH = (washerPower * 240) / 1000.0;

            double dryerPower = Double.parseDouble(dryer_power.getText());
            double dryerKWH = (dryerPower * 240) / 1000.0;

            double acPower = Double.parseDouble(ac_power.getText());
            double acKWH = (acPower * 240) / 1000.0;

            double heaterKWH = 0;
            double solarKWH = 0;


            data.storeUtilityConsumptionPower(fridgeKWH, microwaveKWH, tvKWH, dishwasherKWH, lightsKWH, washerKWH, dryerKWH, acKWH);
            power = new Power( fridgeKWH, microwaveKWH, tvKWH, dishwasherKWH, lightsKWH, washerKWH, dryerKWH, acKWH);
            Cost cost = new Cost(fridgeKWH, microwaveKWH, tvKWH, dishwasherKWH, lightsKWH, washerKWH, dryerKWH, acKWH, heaterKWH, solarKWH);
            status_display.setText("Successfully entered utility power");
            // Update EnergyController with the new power and cost
            if (energyController != null) {
                energyController.updatePowerDetails(power);
                energyController.updateCostDetails(cost);
            }
            display_field.setText(    "Utility Consumptions in KWH:\n" +
                    "Fridge: " + power.getFridgePower() + " KWH \n" +
                    "Microwave: " + power.getMicrowavePower() + " KWH \n" +
                    "TV: " + power.getTVPower() + " KWH \n" +
                    "Dishwasher: " + power.getDishwasherPower() + " KWH\n" +
                    "Lights: " + power.getLightPower() + " KWH \n" +
                    "Washer: " + power.getWasherPower() + " KWH\n" +
                    "Dryer: " + power.getDryerPower() + " KWH\n " +
                    "AC: " + power.getAcPower() + " KWH");



        } catch (NumberFormatException | NullPointerException e) {
            status_display.setText("Error: Please enter numeric values for all fields. " + e.getMessage());
            status_display.setTextFill(Color.RED);
            e.printStackTrace(); // This will print the stack trace to your console
        }

}




    @FXML
    void return_button(ActionEvent event) {
        Stage stage = (Stage) return_button.getScene().getWindow();
        stage.close(); // This will close only the current window
    }

    public void setup(Label statusDisplay, TextArea displayField) {

        this.status_display = statusDisplay;
        this.display_field = displayField;

    }


}
